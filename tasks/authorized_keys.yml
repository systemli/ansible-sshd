---

- name: ensure authorized_keys dir exists
  ansible.builtin.file:
    path: /etc/ssh/authorized_keys
    state: directory
    owner: root
    group: root
    mode: 0755

- name: get current authorized keys
  ansible.builtin.command: ls -1 /etc/ssh/authorized_keys
  register: sshd_old_users
  check_mode: false
  changed_when: false

- name: delete unmaintained authorized keys
  ansible.builtin.file:
    path: "/etc/ssh/authorized_keys/{{ item }}"
    state: absent
  when: "item not in sshd_authorized_keys|map(attribute='user')|list"
  loop: "{{ sshd_old_users.stdout_lines }}"

- name: configure authorized keys
  ansible.builtin.authorized_key:
    user: "{{ item.user }}"
    key: "{{ item.key if item.key is string else '\n'.join(item.key) }}"
    path: "/etc/ssh/authorized_keys/{{ item.user }}"
    exclusive: true
    manage_dir: false
  when: item.key is defined
  loop: "{{ sshd_authorized_keys | flatten(levels=1) }}"

- name: configure authorized keys permissions
  ansible.builtin.file:
    path: "/etc/ssh/authorized_keys/{{ item.user }}"
    owner: root
    group: "{{ item.user }}"
    mode: 0640
  when: item.key is defined
  loop: "{{ sshd_authorized_keys | flatten(levels=1) }}"

- name: link authorized keys file
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "/etc/ssh/authorized_keys/{{ item.user }}"
    state: link
  when: item.key is not defined and item.src is defined
  loop: "{{ sshd_authorized_keys | flatten(levels=1) }}"
